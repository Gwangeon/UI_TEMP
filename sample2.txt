## 로컬 저장소

### Git 저장소 실습

> git add 명령
>>파일을 새로 추적할 때도 사용

>>수정한 파일을 Staged 상태로 만들 때도 사용

>>Merge 할 때 충돌난 상태의 파일을 Resolve 상태로 만들때도 사용

>>프로젝트에 파일을 추가한다기 보다는 다음 커밋에 추가한다의 의미

 * 기존 디렉토리를 Git 저장소로 만들기
  * git init
 * 기존 저장소를 Clone 하기
  * git clone
 * 수정하고 저장소에 저장하기 
  * git add test1.txt
  * git add * // git add .
  * git commit -m 'initial project version'
 * 파일의 상태 확인하기
  * git status
 * 파일을 새로 추적하기
  * git add test1.txt
  * git status
 * Modified 상태의 파일을 Stage 하기
  * git status //  git diff --staged
  * git add 파일명
 * 파일 상태를 짤막하게 확인하기
  * git status -s
 * 파일 상태를 Unstage로 변경하기
  * git add .
  * git status // git diff
  * git reset HEAD 파일명
 * Modified 파일 되돌리기
  * git checkout -- 파일명


### 브랜치 이론
 * 새 브랜치 생성하기
  * git branch testing
   *  git log --oneline --decorate
 * 브랜치 이동하기
  * git checkout testing
   * vi test.txt
   * git commit -a -m 'made a change' // commit && add
    * -a // --a 
  * git checkout master
   * vi test.txt
   * git commit -a -m 'made other changes'
  * git log --oneline --decorate --graph --all

### 브랜치 실습
**시나리오01** 브랜치와 Merge 의 기초
```
실제 개발과정에서 겪을 만한 예제를 하나 살펴보자. 브랜치와 Merge는 보통
이런 식으로 진행한다.
1. 작업 중인 웹사이트가 있다.
2. 새로운 이슈를 처리할 새 Branch를 하나 생성한다.
3. 새로 만든 Branch에서 작업을 진행한다.
이때 중요한 문제가 생겨서 그것을 해결하는 Hotfix를 먼저 만들어야 한다.
그러면 아래와 같이 할 수 있다.
1. 새로운 이슈를 처리하기 이전의 운영(Production) 브랜치로 이동한다.
2. Hotfix 브랜치를 새로 하나 생성한다.
3. 수정한 Hotfix 테스트를 마치고 운영 브랜치로 Merge 한다.
4. 다시 작업하던 브랜치로 옮겨가서 하던 일 진행한다.
5. master 브랜치에 이슈 브런치를 Merge
6. 이슈를 종결한다.

```
 * 브랜치를 만들면서 Checkout까지 한번에 진행
  * git checkout -b issue01
   * git branch issue01
   * git checkout issue01
 * index.html 수정
  * vi index.html
  * git commit -a -m 'added a new footer [issue 01]'
 * 운영브런치로 이동
  * git checkout master
 * hotfix 생성 
  * git checkout -b hotfix
  * vi main.css
  * git commit -a -m 'added a new footer [hotfix]'
 * master branch 합치기
  * git checkout master
  * git merge hotfix
 * hotfix 브런치 삭제
  * git branch -d hotfix
 * 작업 하던 issue01 브런치로 이동
  * git checkout issue01
  * vi index.html
  * git commit -a -m '추가 변경 [issue 01]'
 * issue01 브랜치를  master 브랜치에 Merge
  * git checkout master
  * git merge issue01
 * 이슈 브런치 삭제
  * git branch -d issue01
 
**시나리오02** 충돌의 기초
```
3-way Merge가 실패
  - Merge 하는 두 브랜치에서 같은 파일의 한 부분을 동시에 수정하고 Merge 하면 Git은 해당 부분을 Merge

issue01 과 hotfix 가 같은 부분을 수정 했다
Git은 Merge 하지 못하고 아래와 같은 충돌(Conflict) 메시지를 출력

Auto-merging index.html
CONFLICT (content): Merge conflict in index.html
Automatic merge failed; fix conflicts and then commit the result.

status 명령을 이용
충돌이 일어난 파일은 unmerged 상태로 표시
개발자는 해당 부분을 수동으로 해결
git add 명령으로 다시 Git에 저장

```
 * 브랜치를 만들면서 Checkout까지 한번에 진행
  * git checkout -b issue02
   * git branch issue02
   * git checkout issue02
 * index.html 수정
  * vi index.html
  * git commit -a -m '추가 이슈 수정  [issue 02]'
 * 운영브런치로 이동
  * git checkout master
 * hotfix 생성 
  * git checkout -b hotfix2
  * vi index.html
  * git commit -a -m '추가 이슈 수정 핫픽스 [hotfix2]'
 * master branch 합치기
  * git checkout master
  * git merge hotfix2  
 * hotfix 브런치 삭제
  * git branch -d hotfix2
 * 작업 하던 issue02 브런치로 이동
  * git checkout issue02
  * vi index.html
  * git commit -a -m '추가 변경 [issue 02]'
 * issue02 브랜치를 master 브랜치에 Merge
  * git checkout master
  * git merge issue02
   * 충돌(Conflict) 메시지를 출력
  * git status
  * 소스수정
  * git commit -a -m '추가 변경 [issue 02]' // git mergetool
  * git status
  * git merge issue02
 * 이슈 브런치 삭제
  * git branch -d issue02
 
## 리포트 저장소
```
리모트 브랜치의 이름은 (remote)/(branch) 형식으로 되어 있다
origin/master : 리모트 저장소 origin의 master 브랜치

git init 명령이 자동 으로 만들기 때문에 사용하는 이름 “master"
git clone 명령이 자동으로 만들어주는 리모트 이름 “origin”

git clone -o booyah :  booyah/master 사용자가 정한 대로 리모트 이름 생성

```

 * 리모트 저장소 확인하기
  * git clone 본인이 생성한 깃헙 경로
   * Clone 하면 명령은 자동으로 리모트 저장소를 “origin”이라는 이름으로 추가
   * git clone 명령은 자동으로 로컬의 master 브랜치가 리모트 저장소의 master 브랜치를 추적
  * git remote //  git remote -v
 * 리모트 저장소 추가하기
  * 패스
 * 리모트 저장소를 Pull 하거나 Fetch 하기
  * git fetch [remote-name]
   * 로컬에는 없지만, 리모트 저장소에는 있는 데이터를 모두 가져온다.
   * 리모트 저장소의 모든 브랜치를 로컬에서 접근할 수 있어서 언제든지 Merge 가능(수동)
  * git fetch origin
   * Clone 한 이후에(혹은 마지막으로 가져온 이후에) 수정된 것을 모두 가져옴
   * 리모트 저장소의 데이터를 모두 로컬로 가져오지만, 자동으로Merge 하지 않는다.
  * git full  [remote-name]
   * 리모트 저장소 브랜치에서 데이터를 가져옴 
   * 자동으로 로컬 브랜치와 Merge
  * 리모트 저장소에 Push 하기
   * git push origin master
    * 이 명령은 Clone 한 리모트 저장소에 쓰기 권한이 있고, Clone 하고 난 이후 아무도 Upstream 저장소에 Push 하지 않았을 때만 사용가능
  * 리모트 저장소 살펴보기  
    * git remote show origin // git remote show [remote-name]


**시나리오03** 
 * 리모트 서버로부터 저장소 정보를 동기화
  * git fetch origin
 * 로컬의 issue03 브랜치를 리모트 저장소의 issue03fix 브랜치로 Push 하라 (이슈 진행 내용을 공유하려 할때)
  * git push origin issue03:issue03fix
 * 추적 브랜치가 현재 어떻게 설정되어 있는지 확인
  * git branch -vv
 * git full
  * git fetch && git merge 수행
  * pull 명령 보다는 fetch와 merge 명령을 명시적으로 사용

git diff
git log
